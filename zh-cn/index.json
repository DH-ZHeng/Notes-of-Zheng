[{"categories":["Fiance"],"content":"正态分布与对数正态分布 ","date":"0001-01-01","objectID":"/Notes.github.io/zh-cn/posts/finance/black-scholes/:0:0","tags":["formula"],"title":"Black-Scholes 推导","uri":"/Notes.github.io/zh-cn/posts/finance/black-scholes/"},{"categories":["Fiance"],"content":"正态分布 ","date":"0001-01-01","objectID":"/Notes.github.io/zh-cn/posts/finance/black-scholes/:1:0","tags":["formula"],"title":"Black-Scholes 推导","uri":"/Notes.github.io/zh-cn/posts/finance/black-scholes/"},{"categories":["Fiance"],"content":"概率密度函数 $$ f(x)=\\frac{1}{\\sqrt {2\\pi \\sigma^2}}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}} $$ ","date":"0001-01-01","objectID":"/Notes.github.io/zh-cn/posts/finance/black-scholes/:1:1","tags":["formula"],"title":"Black-Scholes 推导","uri":"/Notes.github.io/zh-cn/posts/finance/black-scholes/"},{"categories":["Fiance"],"content":"标准化 $$ t=\\frac{x-\\mu}{\\sigma}\\ f(t)=\\frac{1}{\\sqrt {2\\pi}}e^{-\\frac{t^2}{2}dt} $$ ","date":"0001-01-01","objectID":"/Notes.github.io/zh-cn/posts/finance/black-scholes/:1:2","tags":["formula"],"title":"Black-Scholes 推导","uri":"/Notes.github.io/zh-cn/posts/finance/black-scholes/"},{"categories":["Fiance"],"content":"标准正态分布随机变量累计分布函数 $$ N(U)=\\int_{t=-\\infty}^U {\\frac{1}{\\sqrt{2\\pi}}e^{-\\frac{t^2}{2}dt}} $$ ","date":"0001-01-01","objectID":"/Notes.github.io/zh-cn/posts/finance/black-scholes/:1:3","tags":["formula"],"title":"Black-Scholes 推导","uri":"/Notes.github.io/zh-cn/posts/finance/black-scholes/"},{"categories":["Fiance"],"content":"对数正态分布 ","date":"0001-01-01","objectID":"/Notes.github.io/zh-cn/posts/finance/black-scholes/:2:0","tags":["formula"],"title":"Black-Scholes 推导","uri":"/Notes.github.io/zh-cn/posts/finance/black-scholes/"},{"categories":["Fiance"],"content":"资产价格的对数变化 如果把资产价格变化 ($S_T-S_0$) 设定为正态分布的话，资产价格可能为负数 通常将资产价格的对数变化 ($lnS_T~-lnS_0$) 设定为正态分布 $$ lnS_T-lnS_0=x\\backsim\\phi(\\mu, \\sigma^2) $$ 因此 $$ S_T = S_0e^x $$ 称$S_T$服从对数正态分布（取对数后服从正态分布) ","date":"0001-01-01","objectID":"/Notes.github.io/zh-cn/posts/finance/black-scholes/:2:1","tags":["formula"],"title":"Black-Scholes 推导","uri":"/Notes.github.io/zh-cn/posts/finance/black-scholes/"},{"categories":["Fiance"],"content":"对数正态分布的期望 随机变量e^x^服从对数正态分布，其期望为： $$ E(e^x)=\\int_{-\\infty}^{\\infty}{e^xf(x)dx}= \\int_{-\\infty}^{\\infty}{e^x\\frac{1}{\\sqrt{2\\pi\\sigma^2}}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}}dx} $$ 标准化，定义$t=\\frac{x-u}{\\sigma}$，则t是一个服从标准正态分布的随机变量 $$ x=\\sigma t+\\mu, dx=\\sigma dt\\ E(e^x)=\\int_{-\\infty}^{\\infty}{e^x \\frac{1}{\\sqrt{2\\pi\\sigma^2}}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}}dx}=e^{\\mu+\\frac{1}{2}\\sigma^2} $$ 连续时间布朗运动 ","date":"0001-01-01","objectID":"/Notes.github.io/zh-cn/posts/finance/black-scholes/:2:2","tags":["formula"],"title":"Black-Scholes 推导","uri":"/Notes.github.io/zh-cn/posts/finance/black-scholes/"},{"categories":["Fiance"],"content":"随机游走 $$ z_1-z_0=\\epsilon_0\\ \\cdot\\ \\cdot\\ z_{t+1}-z_t=\\epsilon_t\\ \\cdot \\ \\cdot $$ $$ z_t-z_0=\\sum\\limits_{j=1}^{t} \\epsilon_{t-j}\\ z_{t+\\Delta}-z_t \\backsim\\phi(0, \\Delta), \\forall \\Delta\u003e0 $$ 由于$\\epsilon_t$独立同分布 $$ E(z_t-z_0)=E(\\sum\\limits_{j=1}^{t} \\varepsilon_{t-j})=\\sum\\limits_{j=1}^{t} E (\\varepsilon_{t-j})=0\\ var(z_t-z_0)=E (\\sum\\limits_{j=1}^{t} \\varepsilon_{t-j})^2=\\sum\\limits_{j=1}^{t} E(\\varepsilon_{t-j})^2=t \\times 1=t $$ ","date":"0001-01-01","objectID":"/Notes.github.io/zh-cn/posts/finance/black-scholes/:3:0","tags":["formula"],"title":"Black-Scholes 推导","uri":"/Notes.github.io/zh-cn/posts/finance/black-scholes/"},{"categories":["Fiance"],"content":"随机积分 $$ E(dz_t)=0\\ var_t(dz_t)=E_t[dz_t-E_t(dz_t)]^2=E_t(dz_t)^2=dt\\ dz_t\\backsim \\sqrt{dt} $$ $dz_t$的量级与$\\sqrt{dt}$的量级一样 广义布朗运动 $$ dx_t=\\mu dt+\\sigma dz_t $$ $dx_t$是每时刻粒子的位置变化，$udt$是每时刻粒子运动的趋势项，$\\sigma$ 是粒子位置变化的标准差 $$ E_t(dx_t)=E_t(\\mu dt+\\sigma dz_t)=\\mu dt\\ \\begin{aligned} var_t(dx_t)\u0026=E_t[dx_t-E_t(dx_t)]^2\\ \u0026=E_t(\\mu dt+\\sigma dz_t-\\mu dt)^2\\ \u0026=\\sigma^2E_t(dz_t)^2\\ \u0026=\\sigma^2dt \\end{aligned} $$ 伊藤引理 反应如果标的资产价格做布朗运动，衍生品的价格是如何运动的 $dz_t$ $dt$ $dz_t$ $dt$ 0 $dt$ 0 0 如果 $x_t$ 服从 $dx_t=\\mu dt+\\sigma dz_t$ 的过程，那么$y_t=f(x_t)$会服从什么过程。 $$ \\begin{aligned} dy_t\u0026=\\frac{\\partial f}{\\partial x}dx_t+\\frac{1}{2}\\frac{\\partial^2f}{\\partial x^2}dx^2\\ \u0026=\\frac{\\partial f}{\\partial x}(\\mu dt+\\sigma dz_t)+\\frac{1}{2} \\frac{\\partial^2 f}{\\partial x^2}(\\mu dt+ \\sigma dz_t)^2\\ \u0026=(\\frac{\\partial f}{\\partial x} \\mu+\\frac{1}{2} \\frac{\\partial^2f}{\\partial x^2} \\sigma^2)dt+ \\frac{\\partial f}{\\partial x} \\sigma dz_t \\end{aligned} $$ $y_t$作为$x_t$的函数，也在做布朗运动，只不过在$y_t$的漂移项中，还包含了$x_t$的扩散项 随机积分 $$ \\int_{t=0}^{T}{dz_t}=\\lim\\limits_{n \\to 0} [(z_{\\Delta}-z_0)+(z_{2\\Delta}-z_{\\Delta})+\\cdots+(z_T-z_{T-\\Delta})]=z_T-z_0 \\backsim \\phi(0, T)\\ \\int_{t=0}^T=dx_t=\\mu \\int_{t=0}^T dt+ \\sigma \\int_{t=0}^T dz_t\\ x_T-x_0=\\mu T+\\sigma \\int_{t=0}^T dz_t\\ E_0(x_T-x_0)=\\mu T\\ var(x_T-x_0)=\\sigma^2 T $$ 几何布朗运动 $$ dS_t=\\mu S_t dt+ \\sigma S_t dz_t\\ $$ 也即： $$ \\frac{dS_t}{S_t}=\\mu dt+\\sigma dz_t $$ ","date":"0001-01-01","objectID":"/Notes.github.io/zh-cn/posts/finance/black-scholes/:4:0","tags":["formula"],"title":"Black-Scholes 推导","uri":"/Notes.github.io/zh-cn/posts/finance/black-scholes/"},{"categories":["Fiance"],"content":"BS公式的偏微分方程推导 假设市场中存在股票和无风险债券两种资产，其价格分别为$S_t$与$B_t$。两种资产价格的运动方程为 $$ dS_t=\\mu S_tdt+\\sigma S_tdz_t\\ dB_t=rBdt $$ 构建无风险组合： $$ V(t, S_t)=-f(t,S_t)+ \\frac{\\partial f}{\\partial S}S_t $$ 包含1单位衍生品的空头，以及$\\frac{\\partial f}{\\partial S}S_t$股的股票多头。 由伊藤引理可以求出组合价值的微分为 $$ \\begin{aligned} dV(t,S_t)\u0026=-df(t,S_t)+\\frac{\\partial f}{\\partial S}dS_t\\ \u0026=-(\\frac{\\partial f}{\\partial t}dt+\\frac{\\partial f}{\\partial S}dS_t+\\frac{1}{2}\\frac{\\partial^2 f}{\\partial S^2}dS^2_t)+\\frac{\\partial f}{\\partial S}dS_t\\ \u0026=-\\frac{\\partial f}{\\partial t}dt-\\frac{1}{2} \\frac{\\partial^2 f}{\\partial S^2}(\\mu S_t dt+\\sigma S_t dz_t)^2\\ \u0026=-\\frac{\\partial f}{\\partial t}dt-\\frac{1}{2}\\frac{\\partial^2 f}{\\partial S^2}\\sigma^2 S^2_t(dz_t)^2\\ \u0026=-(\\frac{\\partial f}{\\partial t}+\\frac{1}{2}\\frac{\\partial^2 f}{\\partial S^2} \\sigma^2 S^2_t)dt \\end{aligned} $$ 由于组合无风险，所以组合的价值理应按照无风险利率r增长，即： $$ dV(t,S_t)=rV(t,S_t)dt $$ 于是有， $$ -(\\frac{\\partial f}{\\partial t}+\\frac{1}{2} \\frac{\\partial^2 f}{\\partial S^2} \\sigma^2S^2_t)dt=rV(t,S_t)dt $$ 将$V(t,S_t)$带入，有 $$ -(\\frac{\\partial f}{\\partial t}+\\frac{1}{2} \\frac{\\partial^2 f}{\\partial S^2} \\sigma^2S^2_t)dt=r[-f(t,S_t)+ \\frac{\\partial f}{\\partial S}S_t]dt $$ 上式两边$d_t$前的系数一定要相等，所以有， $$ \\frac{\\partial f}{\\partial t}+rS_t \\frac{\\partial f}{\\partial S}+\\frac{1}{2}\\sigma^2S^2_t \\frac{\\partial^2 f}{\\partial S^2}=rf $$ 结合边界条件可以解出，比如欧式买入期权的边界条件是$f(T, S_T)=max(S_T-K,0)$ ","date":"0001-01-01","objectID":"/Notes.github.io/zh-cn/posts/finance/black-scholes/:5:0","tags":["formula"],"title":"Black-Scholes 推导","uri":"/Notes.github.io/zh-cn/posts/finance/black-scholes/"},{"categories":["Fiance"],"content":"鞅方法推导 利用随机积分直接把价格的公式接出来。 对于无风险债券家的对数$ln(B_t)$的微分： $$ d(\\ln B_t)=\\frac{1}{B_t}dB_t=\\frac{1}{B_t}B_t dt=rdt $$ 上式左右两边同时求积分可得 $$ \\int_{t=0}^T {d(\\ln B_t)}=\\int_{t=0}^T {rdt} $$ 这便是无风险债券在T时刻价格的公式 接下来再利用伊藤定理来求解出股票价格的公式 $$ \\begin{aligned} d(\\ln S_t)\u0026=\\frac{1}{S_t}dS_t -\\frac{1}{2}\\frac{1}{S^2_t} \\ \u0026=\\mu dt+\\sigma dz_t-\\frac{1}{2S^2_t}(\\mu S_t dt+\\sigma S_tdz_t)^2\\ \u0026=\\mu dt+\\sigma dz_t-\\frac{1}{2}\\sigma^2 dt\\ \u0026=(\\mu-\\frac{1}{2}\\sigma^2)dt+\\sigma dz_t \\end{aligned} $$ 对上式左右两边同时求积分可得 $$ \\int_{t=0}^T{d(\\ln S_t)}=\\int_{t=0}^T{(\\mu -\\frac{1}{2}\\sigma^2)dt}+\\sigma \\int_{t=0}^T {dz_t}\\ \\ln S_T - \\ln S_0 = (\\mu- \\frac{1}{2} \\sigma^2)T + \\sigma \\int_{t=0}^T {dz_t}\\ S_T = S_0e^{(\\mu- \\frac{1}{2} \\sigma^2)T + \\sigma \\int_{t=0}^T {dz_t}} $$ 其中$(\\mu- \\frac{1}{2} \\sigma^2)T + \\sigma \\int_{t=0}^T {dz_t}$是一个正态分布的随机变量，均值为$(\\mu- \\frac{1}{2} \\sigma^2)T$，方差为$\\sigma^2T$，根据对数正态分布的性质有， $$ E(S_T)= S_0 e^{\\mu T} $$ 这里的股票价格并不符合鞅性，即$E(S_T) \\neq S_0 e^{rT}$。这是在真实世界的概率测度下求取的期望，自然不存在鞅性的结论。不过我们知道，当市场中不存在套利机会时，一定存在一个等价鞅测度，股票价格在这个测度下符合鞅性。也就是说，$\\widetilde{E}(S_T)=S_0e^{rT}$，在等价鞅测度下，股票价格应该满足： $$ S_T = S_0e^{(\\mu- \\frac{1}{2} \\sigma^2)T + \\sigma \\int_{t=0}^T {d\\widetilde{z}_t}} $$ T时刻，行权价为K的欧式买入期权在0时刻的价格在等价鞅测度下，有 $$ C_0=e^{-rT} \\widetilde{E} \\lbrace max \\lbrace S_T-K, 0 \\rbrace \\rbrace $$ $\\ln S_T$是一个正态分布的随机变量 $$ \\ln S_T \\backsim [\\ln S_0 +(r-\\frac{1}{2}\\sigma^2)T, \\sigma^2 T ] $$ 将$lnS_T$ 写成 $$ \\ln S_T = a+ b\\mu $$ 其中$\\mu \\backsim \\phi (0,1)$，而a, b两个参数分别为 $$ a= \\ln S_0 +(r-\\frac{1}{2}\\sigma^2)T\\ b= \\sigma \\sqrt{T} $$ 令 $$ e^{a+bU}=K $$ 可以解出 $$ U=\\frac{\\ln K -a}{b}=\\frac{\\ln K-\\ln S_0 +(r-\\frac{1}{2}\\sigma^2)T}{\\sigma \\sqrt{T}} $$ 计算期望 $$ \\begin{aligned} \\widetilde{E} \\lbrace max \\lbrace S_T-K, 0 \\rbrace \\rbrace \u0026= \\int_{U}^{+\\infty} {(e^{a+b\\mu}-K)\\frac{1}{\\sqrt {2\\pi}}e^{-\\frac{1}{2}\\mu^2}du }\\ \u0026=\\frac{1}{\\sqrt {2\\pi}}\\exp [-\\frac{1}{2}(u-b)^2+a+\\frac{1}{2}b^2]du-K \\int_{U}^{+\\infty} {\\frac{1}{\\sqrt {2\\pi}}e^{-\\frac{\\mu^2}{2}}du}\\ \u0026=e^{a+\\frac{1}{2}b^2} \\int_{U-b}^{+\\infty}{\\frac{1}{\\sqrt{2\\pi}}\\exp[-\\frac{1}{2} (u-b)^2]}d(u-b)-KN[-U]\\ \u0026=e^{a+\\frac{1}{2}b^2}[1-N(U-b)]-KN[1-N(U)]\\ \u0026=e^{rT}S_0N(b-U)-KN(-U) \\end{aligned} $$ 其中$a+\\frac{1}{2}b^2=\\ln S_0+rT$ 就有 $$ C_0 = e^{-rT} \\widetilde{E} \\lbrace max \\lbrace S_T-K,0 \\rbrace \\rbrace =S_0 N(b-U)-e^{-rT}KN(-U) $$ 如果定义 $$ d_1 = b-U=\\sigma \\sqrt{T}- \\frac{\\ln K -a}{b}=\\frac{\\ln K-\\ln S_0 +(r-\\frac{1}{2}\\sigma^2)T}{\\sigma \\sqrt{T}} = \\frac{\\ln \\frac{S_0}{K}+（r+\\frac{1}{2}\\sigma^2)T}{\\sigma \\sqrt {T}}\\ d_2 = -U = d_1-b = d_1-\\sigma \\sqrt {T} $$ 则有 $$ C_0 = S_0N(d_1)-e^{-rT}KN(d_2) $$ ","date":"0001-01-01","objectID":"/Notes.github.io/zh-cn/posts/finance/black-scholes/:6:0","tags":["formula"],"title":"Black-Scholes 推导","uri":"/Notes.github.io/zh-cn/posts/finance/black-scholes/"},{"categories":["Code"],"content":"\u003epandas df.sub(a, axis=0) # 按行减去a这一行\rdf.drop(a, axis=0) # 删除a这一列\rdf.dropna() # 删除空值\rdf.cov(ddof=n) # 求自由度为n的协方差\rdf.sort_values(by=aattribute) # 按照某个属性的值排序\rdf.set_index() # 设置索引，可double sorting\rdf.isin(values) # values:iterable, setries, Dataframe or dict\rdf.swaplevel() # 交换双重index的位置\rdf.reset_index() # 重置index, index作为data储存\rdf.fillna(num) # 用num补充所有的nan\rdf.cumprod() # 每个位置的value有前面所有balues累乘\rdf.cumsum() # 累加\rdf.drop_duplicates() # 删除重复值 df.astype() # 整张表修改数据格式 pd.isnull(df).sum() # 空值统计\rpd.merge(df1, df2, on= ) # 相同索引会归在同一行，按列拼接\rpd.concat([df1, df2], axis=0) # 横向拼接\rpd.DatetimeIndex(Growth_Rate.index.get_level_values(1)).year==Year # 双重index内索引为时间，取出某一年的数据 \u003enumpy np.ones(n) # 一维\rnp.ones((n,m)) # 二维\rnp.zeros()\rnp.ones()\rnp.linalg.inv() # 求逆矩阵\rnp.dot(data1, data2) # 矩阵相乘\rdf1.dot(df2)\rnp.split(data, [多个拆分位置]) # 拆分数据\rnp.array_split(data, n) # 将数据平分成为n列\rnp.maximum.accumulate(data)\rnp.maximum.accumulate(date) # 计算数组（或dataframe特定轴）的累积最大值（用于最大回撤）\rnp.unique(data) # 找出不重复的值\rnp.argmax(data) # 返回一个numpy数组中最大值的索引值，多个是返回第一个\rnp.sign(data) # 取数字符号（正负号）的函数（-1，0，1）\rnp.clip(data, a, b) # 剪枝，数据范围限制在[a,b]之间\rnp.quantile(data, quantile) # 取出data的quantile的值\rnp.vstack((array1, array2)) # 纵向堆叠数据\rnp.hstack((array1, array2)) # 水平堆叠数据\rarray.tolist() # array转为list\rarray.cumsum() # 累加，可用于多维数组 \u003e统计方法 ","date":"0001-01-01","objectID":"/Notes.github.io/zh-cn/posts/code/python/:0:0","tags":["Code"],"title":"Python Code Tips","uri":"/Notes.github.io/zh-cn/posts/code/python/"},{"categories":["Code"],"content":"回归 y = x =\rx = sm.add_constant(x)\rmodel = sm.OLS(y,x)\rresult = model.fit()\rp = scipy.stats.f.sf(n:标的数量， m-n-1:自由度)\rststs.ttest_1samp(data,values) # t_test:data可以是多列，同时values要为对应数量的值，比如检验25列数据是否显著不为0，values应该为25个0的list \u003e数据保存 ","date":"0001-01-01","objectID":"/Notes.github.io/zh-cn/posts/code/python/:1:0","tags":["Code"],"title":"Python Code Tips","uri":"/Notes.github.io/zh-cn/posts/code/python/"},{"categories":["Code"],"content":"保存到excel savelocal = writer = pd.ExcelWriter(savelocal)\rdf.to_excel(writer, sheet_name='')\rwriter.save()\rwriter.close() \u003e多进程 p = mp.Pool(n): # n:多进程数量\rresult = []\rresult.append(p.apply_async(function, args=()))\rfor i in result：\rprint(b.get()) # 多进程debug输出\rp.close()\rp.join() \u003eLeetcode enumerate(x) # 给x中的元素贴上序号，并返回序号与元素值\rdict().get() # 根据index取出值 ","date":"0001-01-01","objectID":"/Notes.github.io/zh-cn/posts/code/python/:2:0","tags":["Code"],"title":"Python Code Tips","uri":"/Notes.github.io/zh-cn/posts/code/python/"},{"categories":["Report"],"content":"基于拥挤度判断的行业轮动策略 来源：基于拥挤度判断的行业轮动策略——信达证券 ","date":"0001-01-01","objectID":"/Notes.github.io/zh-cn/posts/research-report/%E8%A1%8C%E4%B8%9A%E8%BD%AE%E5%8A%A8/:1:0","tags":["Strategy"],"title":"基于拥挤度判断的行业轮动策略","uri":"/Notes.github.io/zh-cn/posts/research-report/%E8%A1%8C%E4%B8%9A%E8%BD%AE%E5%8A%A8/"},{"categories":["Report"],"content":"行业轮动策略（动量策略） 年度动量效应在行业层面可能有效，捕捉动量效应和规避动量崩溃是决定动量策略表现的关键因素 定义各行业的动量因子为过去一段时间的行业累计收益率，有： $$ F_{i,t} = \\frac{ClosePrice_{i,t}}{ClosePrice_{i,t-win_len+1}}-1 $$ $F_{i,t}$为第𝑖个行业在𝑡时刻的动量因子 𝑖 = 1,2, ⋯ , 𝑁; 𝑡 = 𝑤𝑖𝑛_𝑙𝑒𝑛, ⋯ , 𝑇； 𝑁为截面行业个数；𝑇为回测时段总天数； $𝐶𝑙𝑜𝑠𝑒𝑃𝑟𝑖𝑐𝑒_𝑖$,𝑡为第𝑖个行业在𝑡时刻的收盘价 𝑤𝑖𝑛_𝑙𝑒𝑛为计算累计收益率时使用的回看窗口的天数 回看窗口（𝒘𝒊𝒏_𝒍𝒆𝒏）是动量策略的关键参数 60交易日为短期；250交易日为长期 中期动量250个交易日为最优 数据：28个中信一级行业（不含综合、综合金融） 策略：过去250个交易日累计涨幅最高的6个行业为多头组合；过去250个交易日累计涨幅最低的6个行业为空头组合；28个行业等权组合为基准 ","date":"0001-01-01","objectID":"/Notes.github.io/zh-cn/posts/research-report/%E8%A1%8C%E4%B8%9A%E8%BD%AE%E5%8A%A8/:1:1","tags":["Strategy"],"title":"基于拥挤度判断的行业轮动策略","uri":"/Notes.github.io/zh-cn/posts/research-report/%E8%A1%8C%E4%B8%9A%E8%BD%AE%E5%8A%A8/"},{"categories":["Report"],"content":"单行业拥挤度 规避相对拥挤的市场环境和行业是动量策略回撤控制的重要方向和手段 构建资产集中度（Asset Centrality）指标来捕捉一组相似资产的拥挤程度 STEP1：主成分分析。将𝑁个行业的收益率时间序列去中心化（去平均值），进行主成分分析，得到𝑁个特征值和𝑁个特征向量。 STEP2：计算方差贡献率。将特征值按照从大到小的顺序排序，将其对应的前𝑛个特征向量分别作为列向量组成特征向量矩阵，计算前𝑛个特征向量的方差贡献率𝐴𝑅（Absorption Ratio）。 $$ AR = \\frac{\\sum\\limits_{j=1}^{n} {\\sigma^2_{Ej}}}{\\sum\\limits_{i=1}^{N} {\\sigma^2_{Aj}}} $$ N:横截面个数 n:选取的特征向量数 $\\sigma^2_{Ej}$:第j个特征向量方差 $\\sigma^2_{Aj}$:第i个行业方差 在𝑛一定的情况下，方差贡献率𝐴𝑅越高，说明各行业走势的共同驱动因素就越强 STEP3：计算单个行业𝑖的资产集中度。以前𝑛个𝐴𝑅为加权比例，计算第𝑖个行业分别在𝑛个特征向量暴露的绝对值在所有行业中的占比。行业𝑖的资产集中度指标即作为行业𝑖的拥挤度度量指标，有: $$ C_{i} = \\frac{\\sum\\limits_{j=1}^{n} ({AR^j_i}*\\frac{|EV^j_i|}{\\sum\\limits_{k=1}^{N} {|EV^j_k|}})}{\\sum\\limits_{j=1}^{n} {AR^j_i}} $$ $C_{i}$:行业𝑖的资产集中度得分; $AR^j_i$:第𝑗个特征向量的方差贡献率 $EV^j_i$:第𝑖个行业在第𝑗个特征向量暴露的绝对值 n:𝑛为方差贡献率分子中的特征向量数，取2 策略 多头组合：取出28 个中信一级行业（不含综合、综合金融）中过去250 个交易日累计涨幅最高的6 个行业。若6 个行业中不包含当前截面最拥挤行业，则等权买入该6 个行业；否则剔除最拥挤行业后递补涨幅靠前的第7 个行业。 空头组合：每次调仓时等权买入28 个中信一级行业（不含综合、综合金融）中，过去250 个交易日累计涨幅最低的6 个行业。 等权组合：每次调仓时等权买入28 个中信一级行业（不含综合、综合金融）。 多头超额：多头组合相对等权组合的累计超额。 ","date":"0001-01-01","objectID":"/Notes.github.io/zh-cn/posts/research-report/%E8%A1%8C%E4%B8%9A%E8%BD%AE%E5%8A%A8/:1:2","tags":["Strategy"],"title":"基于拥挤度判断的行业轮动策略","uri":"/Notes.github.io/zh-cn/posts/research-report/%E8%A1%8C%E4%B8%9A%E8%BD%AE%E5%8A%A8/"},{"categories":["Report"],"content":"市场拥挤度 单行业拥挤度指标剔除最拥挤行业降低了多头组合的持仓风险 使用两个因子度量整个市场的价量拥挤程度：行业拥挤度分散度因子𝑆𝐷𝐶和换手率𝑇𝑢𝑟𝑛𝑂𝑣𝑒𝑟 行业拥挤度分散度因子𝑆𝐷𝐶：定义𝐶𝑖,𝑡为第𝑖个行业在时刻𝑡的资产集中𝑚𝑒𝑎𝑛($𝐶_𝑖$,𝑡)为𝑡时刻截面所有行业资产集中度的均值，𝑁为截面行业个数。当期行业拥挤度分散度因子$𝑆𝐷𝐶_𝑡$定义为资产集中度$𝐶_𝑖$,𝑡截面标准差的相反数，截面所有行业的拥挤度分化越小，说明当前市场越拥挤。 $$ SDC_t = -\\sqrt{\\frac{1}{N-1}\\sum\\limits_{i=1}^{N} (C_i-mean(C_{i,t}))^2} $$ 换手率因子𝑇𝑢𝑟𝑛𝑂𝑣𝑒𝑟：万得全A（881001）每日换手率过去60日的移动平均值 为尽量回避因子在个别时段不平稳的影响，分别对两个因子取过去5 年（1250 个交易日）的分位值。 为兼容𝑆𝐷𝐶和𝑇𝑢𝑟𝑛𝑂𝑣𝑒𝑟两个因子的有效性若两个因子中至少有一个因子分位数上穿95%，模型发出动量失效预警信号，此时多头组合按等权组合的方式配置，多空组合、多头超额收益率均为0 ","date":"0001-01-01","objectID":"/Notes.github.io/zh-cn/posts/research-report/%E8%A1%8C%E4%B8%9A%E8%BD%AE%E5%8A%A8/:1:3","tags":["Strategy"],"title":"基于拥挤度判断的行业轮动策略","uri":"/Notes.github.io/zh-cn/posts/research-report/%E8%A1%8C%E4%B8%9A%E8%BD%AE%E5%8A%A8/"}]